flyaroundcage = function() {	
	
	var window_width = $(window).width();
	var window_height = $(window).height();

	var paper = Raphael(0,0, window_width, window_height);

	//BACKGROUND
	var sky = paper.rect(0,0,window_width, window_height);
	sky.attr("fill", "#B9B1BF");

	// CAGE
	var NUMBER_OF_VERTICAL_BARS = 2;
	var NUMBER_OF_HORIZONTAL_BARS = 8
	var space_between_vertical_bars = window_width / NUMBER_OF_VERTICAL_BARS;
	var space_between_horizontal_bars = window_height / NUMBER_OF_HORIZONTAL_BARS;
	var BAR_THICKNESS = 4;
	var BAR_COLOR = "#FFD700"

	for (i=0; i<NUMBER_OF_VERTICAL_BARS; i++) {
		var bar = paper.rect(i*space_between_vertical_bars, 0, BAR_THICKNESS, window_height);
		bar.attr("fill", BAR_COLOR);
	}

	for (i=0; i<NUMBER_OF_HORIZONTAL_BARS; i++) {
		var bar = paper.rect(0, i*space_between_horizontal_bars, window_width, BAR_THICKNESS);
		bar.attr("fill", BAR_COLOR);
	}

	var ORIENTATION = {
		RIGHT: 0,
		LEFT: 1
	}

	var VERTICAL_DIRECTION = {
		UP: -1, 
		DOWN: 1 
	}

	var Point = function(x, y) {
		this.x = x;
		this.y = y;
	}

	// A BIRD
	function Bird( name, start_point, speed, init_angle ) 
	{
	 	this.name = name;
		this.x = start_point.x;
		this.y = start_point.y;
		this.velocity = {x: 0, y: 0};
		
		var angle = init_angle;
		var speed = speed;

		this.calculateVelocity = function() {
			this.velocity.x = Math.abs( Math.cos(angle)*speed );
			this.velocity.y = Math.abs( Math.sin(angle)*speed );
		};

		// initialize bird images, right and left facing
		var face_right_image = [];
		var face_left_image = [];
		for (i=0; i<4; i++) {
			face_right_image[i] = paper.image('/assets/right_bird' + i + '.png', 9999, 9999, 40, 40);
			face_left_image[i] = paper.image('/assets/left_bird' + i + '.png', 9999, 9999, 40, 40);
		};
		
		var oriented_image_sets = [face_right_image, face_left_image];
		this.orientation = ORIENTATION.RIGHT;
		this.current_oriented_image_set = oriented_image_sets[this.orientation];
		this.current_image_index = 0;
		this.vertical_direction = VERTICAL_DIRECTION.DOWN;


		this.fly = function() {

			if ( this.orientation == ORIENTATION.RIGHT ) {

				if ( this.x < (window_width - 10) ) {
					this.x = this.x + this.velocity.x * dt; 
				} else {
					oriented_image_sets[this.orientation][this.current_image_index].attr( { x: 9999, y: 9999 });
					this.orientation = ORIENTATION.LEFT;
				} 
			}

			if ( this.orientation == ORIENTATION.LEFT ) {
				if ( this.x > 10 ) {
					this.x = this.x - this.velocity.x * dt; 
				} else {
					oriented_image_sets[this.orientation][this.current_image_index].attr( { x: 9999, y: 9999 });
					this.orientation = ORIENTATION.RIGHT;
				} 
			}

			if ( this.vertical_direction == VERTICAL_DIRECTION.DOWN ) {
				if ( this.y < ( window_height - 30 ) ) {
					this.y = this.y + Math.abs( this.velocity.y ) * dt; 
				}
				else {
					this.vertical_direction = VERTICAL_DIRECTION.UP;
				}
			} 

			if ( this.vertical_direction == VERTICAL_DIRECTION.UP ) {
				if ( this.y > 20 ) {
					this.y = this.y - (this.velocity.y * dt )
				}
				else {
					this.vertical_direction = VERTICAL_DIRECTION.DOWN;
				}

			}

			//TODO:  add y flight

			oriented_image_sets[this.orientation][this.current_image_index].attr( { x: 9999, y: 9999 });
			this.current_image_index = ( this.current_image_index + 1 ) % 4;
			oriented_image_sets[this.orientation][this.current_image_index].attr( { x: this.x, y: this.y });

		};
	}

	 

	// make a set of birds
	var birds = [];
	birds[0] = new Bird("tweetie", new Point(10,10), 0.4, .5);
	birds[0].calculateVelocity();
	birds[1] = new Bird("sylvester", new Point(10, 80), 0.5, .3);
	birds[1].calculateVelocity();

	var dt = 50; // refresh rate, in milliseconds
	var animate = function() {
		for ( bird_i = 0;  bird_i < birds.length; bird_i++ ) {
			birds[bird_i].fly();
		}
	}

	// get it all going
	window.setInterval(animate, dt);

}

flytotree = function() {
	//var canvas = $('div#raphael_canvas');

	var window_width = $(window).width();
	var window_height = $(window).height();

	var paper = Raphael(0,0, window_width, window_height);

	//SCENERY
	var sky = paper.rect(0,0,window_width, window_height);
	sky.attr("fill", "90-#66D:5-#88F:95");

	var hill = paper.circle(window_width, window_height + 1400, 1600);
	hill.attr("fill", "#0A0");
	hill.attr("stroke", "#fff");

	var hill2 = paper.circle(100, window_height + 1420, 1700);
	hill2.attr("fill", "#091");
	hill2.attr("stroke", "#fff");

	var trunk = paper.rect(window_width - 140, window_height - 420, 50, 250);
	trunk.attr("fill", "#440");
	trunk.attr("stroke", "#330");

	for (var x = 0; x < 300; x++)
	{
	  var t = 2*Math.PI*Math.random();
	  var u = Math.random()+Math.random();
	  var r = u>1 ? 2-u : u;
	  var theX = r*Math.cos(t);
	  var theY =  r*Math.sin(t);
	  // Creates leaf at x = 50, y = 40, with radius 10
	  var leaf = paper.circle((window_width - 115 + theX*120), (window_height - 420 + theY*120), 15);
	  // Sets the fill attribute of the leaf to green 
	  leaf.attr("fill", "#060");
	  // Sets the stroke attribute of the leaf to light green
	  leaf.attr("stroke", "#0c0");
	}

	var GROUND_Y = window_height - 100;

	var Point = function(x, y) {
		this.x = x;
		this.y = y;
	}

	// A BIRD

	var Bird = function( name, start_point, end_point, flight_time )
	{
		this.alive = true;
		this.name = name;
		this.x = start_point.x;
		this.y = start_point.y;
		this.velocity_x = 0;
		this.velocity_y = 0;
		
		var angle = Math.atan( (end_point.y - start_point.y) / (end_point.x - start_point.x) );
		var speed = (Math.sqrt( Math.pow((end_point.y - start_point.y), 2) 
															+ Math.pow((end_point.x - start_point.x), 2) )) / flight_time;

		this.velocity_x = Math.abs( Math.cos(angle)*speed );
		this.velocity_y = Math.abs( Math.sin(angle)*speed );

		// bird images and kill event on each image
		this.flight_image = [];
		for (i=0; i<4; i++) {

			//var right_bird_path = '<%= asset_path('right_bird0.png') %>';

			this.flight_image[i] = paper.image('/assets/right_bird' + i + '.png', 9999, 9999, 40, 40);
			
			//this.flight_image[i] = paper.image(right_bird_path, 9999, 9999, 40, 40);
			this.flight_image[i].click( function() {
				this.alive = false;
			});
		};

		this.current_image_index = 0;
		var dead_bird_path = '<%= asset_path('deadbird.png') %>';
		this.deadbird_image = paper.image(dead_bird_path, 9999, 9999, 40, 40);

		this.perch = function() {

		}

		this.fly = function() {

			if ( this.alive ) {
					
				if ( this.x < end_point.x && this.y < end_point.y ) {
					this.x = this.x + (this.velocity_x * dt);
					this.y = this.y + (this.velocity_y * dt);

	// TODO: REMOVE THIS
	// this is sitting in here to test out the falling birds
	// until I figure out what's wrong with the click/kill event
	//if (this.x > (start_point.x+end_point.x)/2) {this.alive = false;}

					this.flight_image[this.current_image_index].attr( { x: 9999, y: 9999 } );
					this.current_image_index = (this.current_image_index + 1 ) % 4;
					this.flight_image[this.current_image_index].attr( { x: this.x, y: this.y } );
				}
			}

			else if ( this.y < GROUND_Y ) {
				this.x = this.x + this.velocity_x * dt;
				this.velocity_y = this.velocity_y + 0.025 // acceleration due to gravity
				this.y = this.y + this.velocity_y * dt;
				this.flight_image[this.current_image_index].attr( {x: this.x, y: this.y } );
			
			}

			else {
				this.deadbird_image.attr( {x: this.x, y: GROUND_Y} );
		 		this.flight_image[this.current_image_index].attr( {x: 9999, y: 9999} );
			}

		}

	};

	 
	var max_duration_of_animation = 10000; // in milliseconds
	var dt = 50; // refresh rate, in milliseconds
	var time = 0;

	// make a set of birds
	var birds = [];
	birds[0] = new Bird("tweetie", new Point(10,10), new Point(window_width - 115, window_height - 420), 10000);
	birds[1] = new Bird("toucansam", new Point(30,30), new Point(window_width - 175, window_height - 100), 8000);
	birds[2] = new Bird("polly", new Point(50, 30), new Point(window_width - 225, window_height - 100), 9000);
	birds[3] = new Bird("woodstock", new Point(10, 50), new Point(window_width - 150, window_height - 420), 5000);

	var animate = function() {
		if ( time < max_duration_of_animation ) {

			for ( bird_i = 0;  bird_i < birds.length; bird_i++ )
				{
					birds[bird_i].fly();
				}

			time =  time + dt;

		}
	}

	// get it all going
	window.setInterval(animate, dt);
}
